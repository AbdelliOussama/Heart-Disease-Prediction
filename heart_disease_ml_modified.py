# -*- coding: utf-8 -*-
"""heart_disease_ml_modified.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s5Kz3i6Z9_8R9AOLWsjAYVgVtArd0M40
"""

from google.colab import drive
drive.mount('/content/drive')
# -*- coding: utf-8 -*-
"""heart-disease-prediction-ml-models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SiwbOr5clC9MvwsBR7PkBFFtndPZOXxE

## ***Dataset :***  [***`UCI Heart Disease`***](https://www.kaggle.com/datasets/redwankarimsony/heart-disease-data)



[1]

# -*- coding: utf-8 -*-
#heart-disease-prediction-ml-models.ipynb

#Automatically generated by Colab.

#Original file is located at
  #  https://colab.research.google.com/drive/1SiwbOr5clC9MvwsBR7PkBFFtndPZOXxE

## ***Dataset :***  [***`UCI Heart Disease`***](https://www.kaggle.com/datasets/redwankarimsony/heart-disease-data)

## ***Import Libraries***


# to handle data
import pandas as pd
import numpy as np

# to visualize data
import matplotlib.pyplot as plt
import seaborn as sns

# to preprocess data
from sklearn.preprocessing import LabelEncoder
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.model_selection import train_test_split

# machine learning tasks
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

# metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ignore warnings
import warnings
warnings.filterwarnings('ignore')

"""## ***Load the Dataset***"""

# Load dataset
df = pd.read_csv('/content/drive/MyDrive/heart_disease_uci.csv')
df.head()

from google.colab import drive
drive.mount('/content/drive')

"""##***Preprocessing***"""

num_cols = [col for col in df.columns if df[col].dtype != 'O']
cat_cols = [col for col in df.columns if col not in num_cols]

df[num_cols] = IterativeImputer().fit_transform(df[num_cols])

le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col].astype(str))

"""## ***Apply Machine Learning***"""

X = df.drop('num', axis=1)
y = df['num']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

models = {
    'SVC': SVC(random_state=42),
    'KNeighborsClassifier': KNeighborsClassifier()
}

model_scores = []
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    metric = mean_absolute_error(y_test, y_pred)
    model_scores.append((name, metric))
    print(name, 'MSE: ', mean_squared_error(y_test, y_pred))
    print(name, 'R2: ', r2_score(y_test, y_pred))
    print(name, 'MAE: ', mean_absolute_error(y_test, y_pred))
    print('\n')

best_model = sorted(model_scores, key=lambda x: x[1], reverse=False)[0]
print("Best Model:", best_model[0], "with MAE:", best_model[1])